import { useState, useEffect } from "react";
import axios from "axios";
import Loader from "../components/Loader";
import { 
  Thermometer, 
  Droplets, 
  Sprout, 
  Wheat, 
  TrendingUp,
  MapPin,
  Wind,
  Sparkles,
  BarChart3,
  Info
} from "lucide-react";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Cell } from 'recharts';

const API_BASE_URL = process.env.REACT_APP_API_URL || "http://localhost:5000";

const soilOptions = [
  { label: "Clay", value: "clay", icon: "ðŸŸ¤" },
  { label: "Sandy", value: "sandy", icon: "ðŸŸ¡" },
  { label: "Loamy", value: "loamy", icon: "ðŸŸ«" },
  { label: "Peaty", value: "peaty", icon: "âš«" },
];

const cropOptions = [
  { label: "Wheat", value: "wheat", icon: "ðŸŒ¾" },
  { label: "Rice", value: "rice", icon: "ðŸŒ¾" },
  { label: "Maize", value: "maize", icon: "ðŸŒ½" },
  { label: "Soybean", value: "soybean", icon: "ðŸ«˜" },
];

// Animated number counter
const AnimatedNumber = ({ value, decimals = 2 }) => {
  const [displayValue, setDisplayValue] = useState(0);

  useEffect(() => {
    let startTime;
    const duration = 1500;
    const startValue = 0;
    const endValue = parseFloat(value);

    const animate = (currentTime) => {
      if (!startTime) startTime = currentTime;
      const progress = Math.min((currentTime - startTime) / duration, 1);
      const easeOutQuart = 1 - Math.pow(1 - progress, 4);
      setDisplayValue(startValue + (endValue - startValue) * easeOutQuart);

      if (progress < 1) {
        requestAnimationFrame(animate);
      }
    };

    requestAnimationFrame(animate);
  }, [value]);

  return <>{displayValue.toFixed(decimals)}</>;
};

function PredictYield() {
  const [form, setForm] = useState({
    temperature: "",
    humidity: "",
    soil_type: soilOptions[0].value,
    crop_type: cropOptions[0].value,
    water_flow: "",
    latitude: "",
    longitude: "",
  });
  const [result, setResult] = useState(null);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  const [showTooltip, setShowTooltip] = useState(null);

  const handleChange = (event) => {
    const { name, value } = event.target;
    setForm((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (event) => {
    event.preventDefault();
    setLoading(true);
    setError(null);
    setResult(null);

    try {
      const { data } = await axios.post(`${API_BASE_URL}/predict`, {
        ...form,
        temperature: Number(form.temperature),
        humidity: Number(form.humidity),
        water_flow: Number(form.water_flow),
        latitude: Number(form.latitude),
        longitude: Number(form.longitude),
      });
      setResult(data);
    } catch (apiError) {
      const message = apiError?.response?.data?.error || apiError.message;
      setError(message);
    } finally {
      setLoading(false);
    }
  };

  // Weather condition chart data
  const weatherData = result ? [
    { name: 'Extreme', value: result.predicted_yield * 0.6, color: '#ef4444' },
    { name: 'Normal', value: result.predicted_yield, color: '#10b981' },
    { name: 'Optimal', value: result.predicted_yield * 1.3, color: '#3b82f6' },
  ] : [];

  return (
    <div className="min-h-screen bg-pattern py-12 px-4 sm:px-6 lg:px-8 relative overflow-hidden">
      {/* Animated background elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute -top-20 -left-20 w-96 h-96 bg-emerald-200/20 rounded-full blur-3xl animate-pulse-slow"></div>
        <div className="absolute top-1/2 -right-20 w-96 h-96 bg-teal-200/20 rounded-full blur-3xl animate-pulse-slow" style={{ animationDelay: '2s' }}></div>
        <div className="absolute -bottom-20 left-1/3 w-96 h-96 bg-green-200/20 rounded-full blur-3xl animate-pulse-slow" style={{ animationDelay: '4s' }}></div>
      </div>

      <section className="mx-auto max-w-7xl relative z-10">
        {/* Header */}
        <div className="text-center mb-12 animate-fade-in">
          <div className="inline-flex items-center gap-2 px-4 py-2 bg-emerald-100 text-emerald-700 rounded-full font-medium text-sm mb-4">
            <Sparkles className="w-4 h-4" />
            <span>AI-Powered Agriculture</span>
          </div>
          <h1 className="text-5xl md:text-6xl font-bold font-heading text-transparent bg-clip-text bg-gradient-to-r from-earth-700 via-earth-600 to-emerald-600 mb-4">
            Crop Yield Predictor
          </h1>
          <p className="text-xl text-gray-600 max-w-2xl mx-auto">
            Harness the power of machine learning to optimize your harvest and make data-driven farming decisions
          </p>
        </div>
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* LEFT SIDE - Form */}
          <div className="space-y-6 animate-slide-up">
            <div className="glass-card rounded-3xl p-8 shadow-soft hover:shadow-glow transition-shadow duration-500">
              <div className="flex items-center gap-3 mb-6">
                <div className="p-3 bg-gradient-to-br from-emerald-500 to-teal-500 rounded-2xl">
                  <BarChart3 className="w-6 h-6 text-white" />
                </div>
                <div>
                  <h2 className="text-2xl font-bold font-heading text-gray-800">Field Parameters</h2>
                  <p className="text-sm text-gray-500">Enter your current field conditions</p>
                </div>
              </div>

              <form onSubmit={handleSubmit} className="space-y-5">
                {/* Temperature */}
                <div className="relative group">
                  <label className="flex items-center gap-2 text-sm font-semibold text-gray-700 mb-2">
                    <Thermometer className="w-4 h-4 text-orange-500" />
                    Temperature (Â°C)
                    <button
                      type="button"
                      onMouseEnter={() => setShowTooltip('temp')}
                      onMouseLeave={() => setShowTooltip(null)}
                      className="text-gray-400 hover:text-gray-600"
                    >
                      <Info className="w-4 h-4" />
                    </button>
                  </label>
                  {showTooltip === 'temp' && (
                    <div className="absolute top-0 left-full ml-2 px-3 py-2 bg-gray-900 text-white text-xs rounded-lg whitespace-nowrap z-10">
                      Average field temperature in Celsius
                    </div>
                  )}
                  <input
                    type="number"
                    name="temperature"
                    value={form.temperature}
                    onChange={handleChange}
                    required
                    step="0.1"
                    placeholder="e.g., 25.5"
                    className="input-field"
                  />
                </div>

                {/* Humidity */}
                <div className="relative group">
                  <label className="flex items-center gap-2 text-sm font-semibold text-gray-700 mb-2">
                    <Droplets className="w-4 h-4 text-blue-500" />
                    Humidity (%)
                    <button
                      type="button"
                      onMouseEnter={() => setShowTooltip('humidity')}
                      onMouseLeave={() => setShowTooltip(null)}
                      className="text-gray-400 hover:text-gray-600"
                    >
                      <Info className="w-4 h-4" />
                    </button>
                  </label>
                  {showTooltip === 'humidity' && (
                    <div className="absolute top-0 left-full ml-2 px-3 py-2 bg-gray-900 text-white text-xs rounded-lg whitespace-nowrap z-10">
                      Relative humidity percentage
                    </div>
                  )}
                  <input
                    type="number"
                    name="humidity"
                    value={form.humidity}
                    onChange={handleChange}
                    required
                    step="0.1"
                    placeholder="e.g., 65.0"
                    className="input-field"
                  />
                </div>

                {/* Soil Type */}
                <div>
                  <label className="flex items-center gap-2 text-sm font-semibold text-gray-700 mb-2">
                    <Sprout className="w-4 h-4 text-amber-600" />
                    Soil Type
                  </label>
                  <select
                    name="soil_type"
                    value={form.soil_type}
                    onChange={handleChange}
                    className="input-field cursor-pointer"
                  >
          <label className="flex flex-col text-sm font-medium text-slate-700">
            Temperature (Â°C)
            <input
              type="number"
              name="temperature"
              value={form.temperature}
              onChange={handleChange}
              required
              step="0.1"
              className="mt-1 rounded-md border border-slate-200 px-3 py-2 focus:border-primary focus:outline-none focus:ring-1 focus:ring-primary"
            />
          </label>
          <label className="flex flex-col text-sm font-medium text-slate-700">
            Humidity (%)
            <input
              type="number"
              name="humidity"
              value={form.humidity}
              onChange={handleChange}
              required
              step="0.1"
              className="mt-1 rounded-md border border-slate-200 px-3 py-2 focus:border-primary focus:outline-none focus:ring-1 focus:ring-primary"
            />
          </label>
          <label className="flex flex-col text-sm font-medium text-slate-700">
            Soil Type
            <select
              name="soil_type"
              value={form.soil_type}
              onChange={handleChange}
              className="mt-1 rounded-md border border-slate-200 px-3 py-2 focus:border-primary focus:outline-none focus:ring-1 focus:ring-primary"
            >
              {soilOptions.map((option) => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
          </label>
          <label className="flex flex-col text-sm font-medium text-slate-700">
            Crop Type
            <select
              name="crop_type"
              value={form.crop_type}
              onChange={handleChange}
              className="mt-1 rounded-md border border-slate-200 px-3 py-2 focus:border-primary focus:outline-none focus:ring-1 focus:ring-primary"
            >
              {cropOptions.map((option) => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
          </label>
          <label className="flex flex-col text-sm font-medium text-slate-700">
            Water Flow (L/min)
            <input
              type="number"
              name="water_flow"
              value={form.water_flow}
              onChange={handleChange}
              required
              step="0.1"
              className="mt-1 rounded-md border border-slate-200 px-3 py-2 focus:border-primary focus:outline-none focus:ring-1 focus:ring-primary"
            />
          </label>
          <label className="flex flex-col text-sm font-medium text-slate-700">
            Latitude
            <input
              type="number"
              name="latitude"
              value={form.latitude}
              onChange={handleChange}
              required
              step="0.0001"
              className="mt-1 rounded-md border border-slate-200 px-3 py-2 focus:border-primary focus:outline-none focus:ring-1 focus:ring-primary"
            />
          </label>
          <label className="flex flex-col text-sm font-medium text-slate-700">
            Longitude
            <input
              type="number"
              name="longitude"
              value={form.longitude}
              onChange={handleChange}
              required
              step="0.0001"
              className="mt-1 rounded-md border border-slate-200 px-3 py-2 focus:border-primary focus:outline-none focus:ring-1 focus:ring-primary"
            />
          </label>
        </div>
        <button
          type="submit"
          disabled={loading}
          className="w-full rounded-md bg-primary px-4 py-2 text-white font-semibold shadow hover:bg-primary/90 disabled:cursor-not-allowed disabled:bg-primary/60"
        >
          {loading ? "Predicting..." : "Predict Yield"}
        </button>
            {loading && <Loader label="Calculating" />}
            {error && <p className="text-sm text-red-600">{error}</p>}
          </form>
        </div>

        {/* RIGHT SIDE - Results */}
        <div className="space-y-6">
          {result ? (
            <>
              {/* Main Result Card - Large */}
              <div className="rounded-2xl bg-gradient-to-br from-primary to-accent p-8 shadow-2xl text-white text-center">
                <h2 className="text-xl font-semibold mb-4 opacity-90">Expected Yield</h2>
                <div className="bg-white/20 backdrop-blur-sm rounded-xl p-6">
                  <p className="text-6xl font-extrabold mb-2">
                    {result.predicted_yield.toFixed(2)}
                  </p>
                  <p className="text-2xl font-medium opacity-90">tons/hectare</p>
                </div>
              </div>

              {/* Weather Condition vs Yield Chart */}
              <div className="rounded-lg bg-white p-6 shadow">
                <h3 className="text-lg font-semibold text-slate-900 mb-4">Weather Condition vs Yield</h3>
                <div className="space-y-4">
                  {/* Weather bars showing comparative yields */}
                  <div className="space-y-3">
                    <div>
                      <div className="flex justify-between text-sm mb-1">
                        <span className="font-medium text-slate-700">Extreme Weather</span>
                        <span className="text-slate-600">{(result.predicted_yield * 0.6).toFixed(2)} t/ha</span>
                      </div>
                      <div className="h-8 bg-slate-100 rounded-lg overflow-hidden">
                        <div 
                          className="h-full bg-gradient-to-r from-red-400 to-red-500 rounded-lg flex items-center justify-end px-3"
                          style={{ width: '60%' }}
                        >
                          <span className="text-xs font-semibold text-white">60%</span>
                        </div>
                      </div>
                    </div>

                    <div>
                      <div className="flex justify-between text-sm mb-1">
                        <span className="font-medium text-slate-700">Normal Weather</span>
                        <span className="text-slate-600">{result.predicted_yield.toFixed(2)} t/ha</span>
                      </div>
                      <div className="h-8 bg-slate-100 rounded-lg overflow-hidden">
                        <div 
                          className="h-full bg-gradient-to-r from-primary to-accent rounded-lg flex items-center justify-end px-3 shadow-md"
                          style={{ width: '100%' }}
                        >
                          <span className="text-xs font-semibold text-white">100% (Your Prediction)</span>
                        </div>
                      </div>
                    </div>

                    <div>
                      <div className="flex justify-between text-sm mb-1">
                        <span className="font-medium text-slate-700">Optimal Weather</span>
                        <span className="text-slate-600">{(result.predicted_yield * 1.3).toFixed(2)} t/ha</span>
                      </div>
                      <div className="h-8 bg-slate-100 rounded-lg overflow-hidden">
                        <div 
                          className="h-full bg-gradient-to-r from-green-400 to-green-500 rounded-lg flex items-center justify-end px-3"
                          style={{ width: '130%', maxWidth: '100%' }}
                        >
                          <span className="text-xs font-semibold text-white">130%</span>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Legend */}
                  <div className="pt-4 border-t border-slate-200">
                    <p className="text-xs text-slate-500 italic">
                      * Based on your input conditions: {form.temperature}Â°C temperature
                    </p>
                  </div>
                </div>
              </div>
            </>
          ) : (
            <div className="flex items-center justify-center h-full min-h-[400px] rounded-lg border-2 border-dashed border-slate-200 bg-slate-50">
              <div className="text-center text-slate-400">
                <svg className="mx-auto h-16 w-16 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                </svg>
                <p className="text-lg font-medium">Results will appear here</p>
                <p className="text-sm mt-1">Fill out the form and click Predict Yield</p>
              </div>
            </div>
          )}
        </div>
      </div>
    </section>
  );
}

export default PredictYield;
